import os
import time
import zipfile
import random
import re
import shutil
import subprocess
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urlparse

import requests
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# --- Selenium Imports ---
from selenium import webdriver
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from selenium_stealth import stealth

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

PLAYLIST_FILE = "playlists.txt"
BASE_OUTPUT_FOLDER = "downloaded_playlists"
# –ü—É—Ç—å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
FINAL_DESTINATION_FOLDER = "/media/esk-dev/522EDD382EDD15B7" # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –ü–£–¢–¨

BASE_URL = "https://hypnotube.com"
REQUESTS_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
}
MAX_DOWNLOAD_THREADS = 4

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---
PERFORM_POST_PROCESSING = False
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

def sanitize_filename(name):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    name = re.sub(r'[<>:"/\\|?*]', '_', name)
    name = re.sub(r'\s+', ' ', name).strip()
    return name

def get_selenium_driver():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Selenium WebDriver."""
    chrome_options = ChromeOptions()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument(f'user-agent={REQUESTS_HEADERS["User-Agent"]}')
    chrome_options.add_argument("window-size=1920,1080")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    try:
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Chrome WebDriver: {e}")
        return None

    stealth(driver, languages=["en-US", "en"], vendor="Google Inc.", platform="Win32", webgl_vendor="Intel Inc.", renderer="Intel Iris OpenGL Engine", fix_hairline=True)
    driver.set_page_load_timeout(60)
    return driver

# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–µ–π–ª–∏—Å—Ç–∞
def get_playlist_title_and_video_links(driver, playlist_url):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–µ–π–ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä,
    –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ.
    """
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {playlist_url}")
    try:
        driver.get(playlist_url)
        WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'a[href*="/video/"]')))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        soup = BeautifulSoup(driver.page_source, "html.parser")
        playlist_title_tag = soup.select_one('h1.title, .playlist-title')
        if playlist_title_tag:
            playlist_title = playlist_title_tag.get_text(strip=True)
        else:
            try:
                path_parts = urlparse(playlist_url).path.strip('/').split('/')
                playlist_title = path_parts[-1] if path_parts[-1] else path_parts[-2]
            except:
                 playlist_title = "Untitled_Playlist_" + str(random.randint(1000, 9999))

        all_links = []
        found_urls = set()
        page_num = 1
        
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
        while True:
            print(f"üìÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ (–≤–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
            WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'a[href*="/video/"]')))
            
            page_soup = BeautifulSoup(driver.page_source, "html.parser")
            video_anchors = page_soup.select('a[href*="/video/"]')
            
            new_links_on_page = 0
            for a in video_anchors:
                href = a.get("href")
                if href and "/video/" in href and not any(x in href for x in ["/playlist/", "/user/", "/channel/"]):
                    full_url = href if href.startswith("http") else BASE_URL + href
                    if full_url not in found_urls:
                        all_links.append(full_url)
                        found_urls.add(full_url)
                        new_links_on_page += 1
            
            print(f"   -> –ù–∞–π–¥–µ–Ω–æ {new_links_on_page} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ.")

            try:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Next"
                next_page_button = driver.find_element(By.CSS_SELECTOR, "a[rel='next']")
                print("   -> –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Next', –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∫–ª–∏–∫–∞, —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ
                driver.execute_script("arguments[0].scrollIntoView(true);", next_page_button)
                time.sleep(0.5)
                driver.execute_script("arguments[0].click();", next_page_button)
                page_num += 1
                time.sleep(2) # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
            except NoSuchElementException:
                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
                break
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
        
        print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: '{playlist_title}'. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ: {len(all_links)} —à—Ç.")
        return playlist_title, all_links
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ {playlist_url}: {e}")
        return None, []


def extract_mp4_link_and_title(driver, video_page_url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ .mp4 –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã–±–∏—Ä–∞—è –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ."""
    print(f"üî© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {video_page_url}")
    try:
        driver.get(video_page_url)
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "video")))
        time.sleep(1)
        
        soup = BeautifulSoup(driver.page_source, "html.parser")
        video_title = soup.select_one('h1').get_text(strip=True) if soup.select_one('h1') else "Untitled_Video"
        
        best_mp4_url = None
        # –ò—â–µ–º –≤—Å–µ —Ç–µ–≥–∏ <source> —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º size, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        source_tags = soup.select("video > source[src*='.mp4'][size]")
        
        if source_tags:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
            quality_options = [{"quality": int(tag.get('size', 0)), "url": tag.get('src')} for tag in source_tags]
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'quality'
            best_option = max(quality_options, key=lambda x: x['quality'])
            best_mp4_url = best_option['url']
            print(f"   - –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ '{video_title}'. –í—ã–±—Ä–∞–Ω–æ –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {best_option['quality']}p.")
        elif soup.select_one("video[src]"):
            best_mp4_url = soup.select_one("video[src]").get('src')
            print(f"   - –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ '{video_title}'. –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–≥–∞ <video>.")
        
        if best_mp4_url:
            if not best_mp4_url.startswith("http"):
                best_mp4_url = urlparse(video_page_url).scheme + ":" + best_mp4_url if best_mp4_url.startswith("//") else BASE_URL + best_mp4_url
            print(f"   -> üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞.")
            return best_mp4_url, video_title
            
        print(f"   - ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ MP4 —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∏–¥–µ–æ '{video_title}'.")
        return None, video_title
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_page_url}: {e}")
        return None, "Untitled_Error_Video"

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (download_video, create_zip_archive –∏ —Ç.–¥.) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def download_video(mp4_url, title, output_folder, session):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª."""
    sanitized_title = sanitize_filename(title)
    filepath = os.path.join(output_folder, f"{sanitized_title}.mp4")
    
    if os.path.exists(filepath) and os.path.getsize(filepath) > 0:
        print(f"   -> ‚úÖ –§–∞–π–ª '{sanitized_title}.mp4' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫.")
        return filepath
        
    print(f"   -> üì• –ó–∞–≥—Ä—É–∑–∫–∞: {sanitized_title}.mp4")
    try:
        with session.get(mp4_url, stream=True, headers=REQUESTS_HEADERS, timeout=(30, 300)) as r:
            r.raise_for_status()
            with open(filepath, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192 * 4): # –£–≤–µ–ª–∏—á–µ–Ω chunk_size
                    f.write(chunk)
        return filepath
    except Exception as e:
        print(f"   -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{sanitized_title}': {e}")
        if os.path.exists(filepath): os.remove(filepath)
        return None

def create_zip_archive(folder_to_zip, zip_name_base):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É zip-—Ñ–∞–π–ª—É."""
    print(f"\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ '{os.path.basename(folder_to_zip)}'...")
    try:
        final_zip_path = shutil.make_archive(zip_name_base, 'zip', folder_to_zip)
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {final_zip_path}")
        return final_zip_path
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}")
        return None

def get_requests_session_with_retries():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é requests —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    session = requests.Session()
    retries = Retry(total=5, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
    session.mount('http://', HTTPAdapter(max_retries=retries))
    session.mount('https://', HTTPAdapter(max_retries=retries))
    return session

def transfer_cookies_from_selenium_to_requests(driver, session):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç cookie –∏–∑ Selenium –≤ —Å–µ—Å—Å–∏—é requests."""
    print("üç™ –ü–µ—Ä–µ–Ω–æ—Å cookie –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –∑–∞–≥—Ä—É–∑—á–∏–∫...")
    for cookie in driver.get_cookies():
        session.cookies.set(cookie['name'], cookie['value'], domain=cookie['domain'])
    print("‚úÖ Cookie —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã.")

def main():
    if not os.path.exists(PLAYLIST_FILE):
        with open(PLAYLIST_FILE, "w") as f: f.write("# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É\n")
        print(f"üí° –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª '{PLAYLIST_FILE}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.")
        return
        
    if PERFORM_POST_PROCESSING and not shutil.which("ffmpeg"):
        print("‚ùå –û–®–ò–ë–ö–ê: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    with open(PLAYLIST_FILE, "r") as f:
        playlist_urls = [line.strip() for line in f if line.strip() and not line.startswith("#")]
    if not playlist_urls:
        print(f"‚ö†Ô∏è –§–∞–π–ª '{PLAYLIST_FILE}' –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã.")
        return
        
    os.makedirs(BASE_OUTPUT_FOLDER, exist_ok=True)
    
    driver = get_selenium_driver()
    if not driver:
        return

    try:
        driver.get(BASE_URL + "/")
        print("\n" + "="*80)
        print("üî¥ –í–ê–ñ–ù–û: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é –í–û–ô–î–ò–¢–ï –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞.")
        print("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç—É –∫–æ–Ω—Å–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ [Enter] –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        print("="*80)
        input()

        try:
             WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "a[href*='logout']")))
             print("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ—Ö–æ–∂–µ, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        except TimeoutException:
             print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ –≤–∞—à —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.")

        requests_session = get_requests_session_with_retries()
        transfer_cookies_from_selenium_to_requests(driver, requests_session)

        for url in playlist_urls:
            print(f"\n{'='*20} –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ –° –ü–õ–ï–ô–õ–ò–°–¢–û–ú: {url} {'='*20}")
            
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï —Å—Å—ã–ª–∫–∏ —Å–æ –í–°–ï–• —Å—Ç—Ä–∞–Ω–∏—Ü
            playlist_title, video_page_links = get_playlist_title_and_video_links(driver, url)
            
            if not video_page_links:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.")
                continue
                
            sanitized_playlist_title = sanitize_filename(playlist_title)
            playlist_folder = os.path.join(BASE_OUTPUT_FOLDER, sanitized_playlist_title)
            os.makedirs(playlist_folder, exist_ok=True)
            
            videos_to_download = []
            print("\nüîÑ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            for page_url in video_page_links:
                mp4_url, video_title = extract_mp4_link_and_title(driver, page_url)
                if mp4_url and video_title:
                    videos_to_download.append({"url": mp4_url, "title": video_title})
                time.sleep(random.uniform(0.5, 1.5))

            if not videos_to_download:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ '{playlist_title}'.")
                continue

            print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ {len(videos_to_download)} –≤–∏–¥–µ–æ –≤ {MAX_DOWNLOAD_THREADS} –ø–æ—Ç–æ–∫–æ–≤...")
            with ThreadPoolExecutor(max_workers=MAX_DOWNLOAD_THREADS) as executor:
                futures = [executor.submit(download_video, video['url'], video['title'], playlist_folder, requests_session) for video in videos_to_download]
                for future in as_completed(futures):
                    future.result()

            # --- –õ–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
            zip_base_name = os.path.join(BASE_OUTPUT_FOLDER, sanitized_playlist_title)
            created_zip_file = create_zip_archive(playlist_folder, zip_base_name)

            if created_zip_file:
                if os.path.exists(FINAL_DESTINATION_FOLDER):
                    try:
                        print(f"üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ '{os.path.basename(created_zip_file)}' –≤ '{FINAL_DESTINATION_FOLDER}'...")
                        shutil.move(created_zip_file, FINAL_DESTINATION_FOLDER)
                        print("   -> ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                        
                        try:
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏: {playlist_folder}")
                            shutil.rmtree(playlist_folder)
                            print("   -> ‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                        except Exception as e:
                            print(f"   -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ '{playlist_folder}': {e}")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ '{created_zip_file}': {e}")
                        print("   -> ‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
                else:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: –ö–æ–Ω–µ—á–Ω–∞—è –ø–∞–ø–∫–∞ '{FINAL_DESTINATION_FOLDER}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    print(f"   -> ‚ö†Ô∏è –ê—Ä—Ö–∏–≤ '{os.path.basename(created_zip_file)}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
            
            print(f"\n{'='*20} –†–ê–ë–û–¢–ê –° –ü–õ–ï–ô–õ–ò–°–¢–û–ú '{playlist_title}' –ó–ê–í–ï–†–®–ï–ù–ê {'='*20}")

    finally:
        if 'driver' in locals() and driver:
            print("\nüèÅ –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            driver.quit()

    print("\n\nüéâüéâüéâ –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´! üéâüéâüéâ")

if __name__ == "__main__":
    main()